%d — decimal (диситичное число). На ее место будет подставлна переменная типа int
%s — string (ряд). на ее песто будет подставлен масив символов (const char*) по этом при переда string нужно указываьть с .c_str()
%c — character (символ) Для char
%f — float (число с плавующей точной). Для float или double


                                Обьязательный каркас

initscr()        инициализирует библиотке и переводит терминал с потокового режима в экранны где уже можно рисовать


endwin()        заканчивает работу ncurses переводит терминал в обычный режим обьязательно вызывается в конце роботы с ncurses(в конце программы)


                                Настройки пространства
                                
noecho()      отключает "эхо"  без нее нажатые клавиши выводятся на экран он уберает вывод клафишь на экран при их нажатии


cbreak()     убиряд буфрезацию ряда в обычном случае терминал ждет нажатия Enter cbreak() это убирает и позволяет таким функциям как getch() работать моментально


keypad(window, flag)      включает распознавание клавиш такие как (стрелки, F1-F12, Home, End, Delete і т.д.)   без нее getch() будет возвращать странные результаты
функция принимает два параметра:
1)WINDOW* window указатель на окно в него мы всегда пишем stdscr эту переменную создает библиотека ncurses
2)bool flag     true - что бы включить  false - что бы выключить


curs_set(visibility)  устанавливает видемость курсора
параметр:
1)int visibility      имеет 3 параметра
0 - невидимый, 1 - нормальний, 2 - очень видимий




                                Вывод на экран
                                
 refresh()      обновляет настоящий экран другими функциями все делается на виртуальном экране refresh() же отображеат все на реальный без него результат не увидеть


 clear()  очищает виртуальный экран
 пример применения: clear(); refresh(); отчистка и вывод результата


getmaxyx(window, y, x)  получает текущие размеры окна высоту и ширину
Параметры:
1)WINDOW* window указатель на окно в него мы всегда пишем stdscr эту переменную создает библиотека ncurses
2)int& y: Ссылка на переменную высоты какую нужно создать туда запишется количество рядов
3)int& x:  Ссылка на переменную ширины какую нужно создать туда запишется количество столбцов
пример:
int height, width;
getmaxyx(stdscr, height, width);


mvprintw(y, x, format, ...)        функция для вывода информации на экран (y, x) устанавливают курсор а format строчка какая будет выведена
Параметры:
int y: Номер ряда координата Y от 0
int x: Номер столбчика координата X, от 0
const char* format: Рядок форматування (с %d, %s і т.д.)
...: переменные какие будут подставлены в строчку форматирования
Пример:
string name = "User";
int score = 100;
mvprintw(5, 10, "Гравець: %s | Рахунок: %d", name.c_str(), score);
если хочется передавать один ряд то склеиваем его в отдельной переменной и передаем
std::string output = "Гравець: " + name + " | Рахунок: " + std::to_string(score);
mvprintw(5, 10, "%s", output.c_str());




                                Робота с пользователем
                                
                                
getch()    ждет пока пользователь нажмет на какую либо клавишу и возвращает ее код
пример
int key_code = getch();
if (key_code == KEY_UP) {
    // пользователь нажал стрелку в верх
} else if (key_code == 'q') {
    // пользователь нажал 'q'
}
Список клавишь:
1)Для символов (a, b, c, 1, 2, *, ) getch() возвращает их ASCII-код можно сравнивать if (key == 'q') как с элементом char
2)KEY_F(n)    функциональные клавишь F1...F12  пример KEY_F(1) — это F1
3)константы:
KEY_UP           Стрелка вверх
KEY_DOWN         Стрелка вниз
KEY_LEFT         Стрелка влево
KEY_RIGHT        Стрелка вправо
KEY_HOME	 Home
KEY_END          End
KEY_BACKSPACE    Backspace
KEY_DC           Delete (Delete Character)
KEY_IC           Insert (Insert Character)
KEY_ENTER        Enter (иногда может возвращать 10 или 13)
KEY_NPAGE        Page Down (Next Page)
KEY_PPAGE        Page Up (Previous Page)
4)ERR возвращает getch() если он работает в не блокирующем режиме timeout(ms) и за указаное время не было нажато какой либо клавиши

getyx() нужна для сохранеия текущих координат курсора
Параметры:
1)WINDOW* window указатель на окно в него мы всегда пишем stdscr эту переменную создает библиотека ncurses
2)переменная для сохранения Y координаты
3)переменная для сохранения X координаты

timeout(delay)    меняет роботу getch()
параметры:
1)int delay   задержка в милисекундах
1.1)timeout(100): getch() будет ждать 100 мс. Если ничего не нажмется будет нажато то вернет ERR
1.2)timeout(0): getch() вообще не будет ждать. ЯЕсли ничего не нажмется будет нажато то вернет ERR
1.3)timeout(-1): getch() возвращает стандартный режим ждать вечно



                                Атрибуты и цвета
                                
                                
attron(attribute) / attroff(attribute)   включает или выключает визуальный атрибут для всего текста что будет выведен после этой функции
параметры:
1)int attribute      Одна из констант например как A_BOLD, A_REVERSE, иили COLOR_PAIR(n). можно комбинировать через |: attron(A_BOLD | A_UNDERLINE);


start_color() инициальзирует систему цветов.вызывается 1 раз после initscr()


init_pair(pair_number, text_color, background_color) меняет цветовую палитру которую потом можно использовать
Параметры:
1)short pair_number: номер пары который нужно выдумать  (от 1 до COLOR_PAIRS-1)
2)short text_color  отдна из констант COLOR_BLACK, COLOR_RED, COLOR_GREEN, COLOR_YELLOW, COLOR_BLUE, COLOR_MAGENTA, COLOR_CYAN, COLOR_WHITE
3)short background_color: отдна из констант COLOR_BLACK, COLOR_RED, COLOR_GREEN, COLOR_YELLOW, COLOR_BLUE, COLOR_MAGENTA, COLOR_CYAN, COLOR_WHITE



COLOR_PAIR(pair_number)   это не функция а макрос какой переделывает номер пары на атрибут понятный attron() 


use_default_colors()         добавляет новый цвет по уполцанию для фона типа "прозрачный" то у attron(COLOR_PAIR(x)) если у COLOR_PAIR стоит у атрибуда фон -1 то фон останется прозрачным то есть цветом по умолчанию.Используется один раз после init_pair()
